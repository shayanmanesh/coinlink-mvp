version: '3.8'

services:
  # PostgreSQL production database
  postgres:
    image: postgres:15-alpine
    container_name: coinlink-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=coinlink
      - POSTGRES_USER=coinlink
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-coinlink_dev_password}
      - POSTGRES_HOST_AUTH_METHOD=md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U coinlink -d coinlink"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Redis for caching, rate limiting, and WebSocket pub/sub
  redis:
    image: redis:7-alpine
    container_name: coinlink-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: coinlink-backend
    ports:
      - "8000:8000"
    environment:
      # Database
      - DATABASE_URL=postgresql+asyncpg://coinlink:${POSTGRES_PASSWORD:-coinlink_dev_password}@postgres:5432/coinlink
      # Redis
      - REDIS_URL=redis://redis:6379
      # Core Environment
      - PYTHON_ENV=development
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      # Security
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-dev_secret_key_minimum_32_characters_long_for_docker_testing}
      - ALLOWED_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://localhost:3001}
      - PASSWORD_HASH_ROUNDS=${PASSWORD_HASH_ROUNDS:-12}
      - SESSION_TIMEOUT_HOURS=${SESSION_TIMEOUT_HOURS:-24}
      # External APIs
      - COINBASE_API_KEY=${COINBASE_API_KEY}
      - COINBASE_API_SECRET=${COINBASE_API_SECRET}
      - COINBASE_KEY_JSON=${COINBASE_KEY_JSON}
      - COINGECKO_API_KEY=${COINGECKO_API_KEY}
      - HF_TOKEN=${HF_TOKEN}
      - REDDIT_API_SECRET=${REDDIT_API_SECRET}
      - REDDIT_CLIENT_ID=${REDDIT_CLIENT_ID}
      - NEWSAPI_API_KEY=${NEWSAPI_API_KEY}
      - MESSARI_API_KEY=${MESSARI_API_KEY}
      # Observability
      - SENTRY_DSN=${SENTRY_DSN}
      - METRICS_ENABLED=${METRICS_ENABLED:-true}
      - PROMETHEUS_PORT=${PROMETHEUS_PORT:-9090}
      - API_V1_STR=/api/v1
      - MAX_CONNECTIONS_COUNT=${MAX_CONNECTIONS_COUNT:-10}
      - MIN_CONNECTIONS_COUNT=${MIN_CONNECTIONS_COUNT:-10}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    networks:
      - coinlink-network

  # Frontend React app (optional for local development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: coinlink-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000/ws
      - REACT_APP_VERSION=${GITHUB_SHA:-dev}
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm start
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    networks:
      - coinlink-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  coinlink-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
