{"ast":null,"code":"import axios from 'axios';\n\n// API base configuration\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst WS_BASE_URL = process.env.REACT_APP_WS_URL || 'ws://localhost:8000/ws';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 60000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Global rate-limit friendly handling and auto-retry (single retry)\napi.interceptors.response.use(response => response, async error => {\n  try {\n    var _error$response;\n    const status = error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status;\n    const config = (error === null || error === void 0 ? void 0 : error.config) || {};\n    if (status === 429 && !config._retry) {\n      console.warn('Too many requests. Retrying in 5s...');\n      config._retry = true;\n      await new Promise(r => setTimeout(r, 5000));\n      return api.request(config);\n    }\n  } catch {}\n  return Promise.reject(error);\n});\n\n// Bitcoin Analysis API\nexport const bitcoinAPI = {\n  // Chat with Bitcoin analyst\n  async chat(message, sessionId = 'default') {\n    try {\n      const response = await api.post('/api/chat', {\n        message,\n        session_id: sessionId\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Chat API error:', error);\n      throw error;\n    }\n  },\n  // Get current Bitcoin price\n  async getPrice() {\n    try {\n      const response = await api.get('/api/bitcoin/price');\n      return response.data;\n    } catch (error) {\n      console.error('Price API error:', error);\n      throw error;\n    }\n  },\n  // Get Bitcoin sentiment\n  async getSentiment() {\n    try {\n      const response = await api.get('/api/bitcoin/sentiment');\n      return response.data;\n    } catch (error) {\n      console.error('Sentiment API error:', error);\n      throw error;\n    }\n  },\n  // Get market summary\n  async getMarketSummary() {\n    try {\n      const response = await api.get('/api/bitcoin/market-summary');\n      return response.data;\n    } catch (error) {\n      console.error('Market summary API error:', error);\n      throw error;\n    }\n  },\n  // Get Bitcoin news\n  async getNews(limit = 10) {\n    try {\n      const response = await api.get(`/api/bitcoin/news?limit=${limit}`);\n      return response.data;\n    } catch (error) {\n      console.error('News API error:', error);\n      throw error;\n    }\n  },\n  // Analyze text sentiment\n  async analyzeText(text) {\n    try {\n      const response = await api.post('/api/bitcoin/analyze', {\n        text\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Text analysis API error:', error);\n      throw error;\n    }\n  }\n};\n\n// Alerts API\nexport const alertsAPI = {\n  // Get active alerts\n  async getActiveAlerts() {\n    try {\n      const response = await api.get('/api/alerts');\n      return response.data;\n    } catch (error) {\n      console.error('Alerts API error:', error);\n      throw error;\n    }\n  },\n  // Get alert history\n  async getAlertHistory(limit = 20) {\n    try {\n      const response = await api.get(`/api/alerts/history?limit=${limit}`);\n      return response.data;\n    } catch (error) {\n      console.error('Alert history API error:', error);\n      throw error;\n    }\n  }\n};\n\n// Chat API\nexport const chatAPI = {\n  // Get chat history\n  async getChatHistory() {\n    try {\n      const response = await api.get('/api/chat/history');\n      return response.data;\n    } catch (error) {\n      console.error('Chat history API error:', error);\n      throw error;\n    }\n  }\n};\n\n// System API\nexport const systemAPI = {\n  // Health check\n  async healthCheck() {\n    try {\n      const response = await api.get('/health');\n      return response.data;\n    } catch (error) {\n      console.error('Health check API error:', error);\n      throw error;\n    }\n  },\n  // Get connection count\n  async getConnectionCount() {\n    try {\n      const response = await api.get('/api/connections');\n      return response.data;\n    } catch (error) {\n      console.error('Connection count API error:', error);\n      throw error;\n    }\n  },\n  // Get contextual prompts\n  async getContextualPrompts() {\n    try {\n      var _response$data;\n      const response = await api.get('/api/prompts');\n      return ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.prompts) || [];\n    } catch (error) {\n      console.error('Prompts API error:', error);\n      return [];\n    }\n  }\n};\n\n// WebSocket connection helper\nexport class WebSocketService {\n  constructor(url = WS_BASE_URL) {\n    this.url = url;\n    this.ws = null;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectDelay = 1000;\n    this.listeners = new Map();\n  }\n  connect() {\n    return new Promise((resolve, reject) => {\n      try {\n        try {\n          console.log('[WS] connecting to', this.url);\n        } catch {}\n        this.ws = new WebSocket(this.url);\n        this.ws.onopen = () => {\n          console.log('WebSocket connected');\n          this.reconnectAttempts = 0;\n          this.emit('connected');\n          resolve();\n        };\n        this.ws.onmessage = event => {\n          try {\n            const data = JSON.parse(event.data);\n\n            // Handle ping messages by responding with pong\n            if (data.type === 'ping') {\n              this.send({\n                type: 'pong',\n                timestamp: new Date().toISOString()\n              });\n              return;\n            }\n\n            // Ensure we're not passing the event object itself\n            if (data && typeof data === 'object' && !data.type) {\n              // Add a timestamp if not present\n              if (!data.timestamp) {\n                data.timestamp = new Date().toISOString();\n              }\n            }\n            // Guard against Event-like payloads\n            const isEventLike = data && (data.type === 'Event' || data.target !== undefined || data.currentTarget !== undefined);\n            if (!isEventLike) {\n              this.emit('message', data);\n            }\n          } catch (error) {\n            console.error('WebSocket message parse error:', error);\n            // Send a safe error message\n            this.emit('error', {\n              message: 'Failed to parse message',\n              timestamp: new Date().toISOString()\n            });\n          }\n        };\n        this.ws.onclose = event => {\n          console.log('WebSocket disconnected:', event.code, event.reason);\n          // Only pass safe, serializable data\n          const safeData = {\n            code: event.code || 0,\n            reason: event.reason || 'Unknown reason',\n            timestamp: new Date().toISOString()\n          };\n          this.emit('disconnected', safeData);\n\n          // Don't reconnect if it was a manual close or server shutdown\n          if (event.code === 1000 || event.code === 1001) {\n            console.log('WebSocket closed normally, not reconnecting');\n            return;\n          }\n\n          // Attempt to reconnect with exponential backoff\n          if (this.reconnectAttempts < this.maxReconnectAttempts) {\n            const delay = Math.min(this.reconnectDelay * Math.pow(2, this.reconnectAttempts), 10000);\n            console.log(`Reconnecting in ${delay}ms (attempt ${this.reconnectAttempts + 1}/${this.maxReconnectAttempts})`);\n            setTimeout(() => {\n              this.reconnectAttempts++;\n              this.connect().catch(err => {\n                console.error('Reconnection failed:', err);\n              });\n            }, delay);\n          } else {\n            console.log('Max reconnection attempts reached');\n            this.emit('reconnection_failed', {\n              message: 'Failed to reconnect after maximum attempts',\n              timestamp: new Date().toISOString()\n            });\n          }\n        };\n        this.ws.onerror = error => {\n          try {\n            console.error('WebSocket error occurred');\n          } catch {}\n          // Only pass safe, serializable data - never pass the error object directly\n          const safeData = {\n            message: 'WebSocket connection error occurred',\n            timestamp: new Date().toISOString()\n          };\n          this.emit('error', safeData);\n          // Don't reject with the raw error object\n          reject(new Error('WebSocket connection failed'));\n        };\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n  disconnect() {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n  send(data) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify(data));\n    } else {\n      console.warn('WebSocket not connected');\n    }\n  }\n\n  // Event listener system\n  on(event, callback) {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, []);\n    }\n    this.listeners.get(event).push(callback);\n  }\n  off(event, callback) {\n    if (this.listeners.has(event)) {\n      const callbacks = this.listeners.get(event);\n      const index = callbacks.indexOf(callback);\n      if (index > -1) {\n        callbacks.splice(index, 1);\n      }\n    }\n  }\n  emit(event, data) {\n    if (this.listeners.has(event)) {\n      this.listeners.get(event).forEach(callback => {\n        try {\n          // Ensure we're not passing event objects to React components\n          if (data && typeof data === 'object') {\n            // Check if it's a DOM Event object\n            if (data.type === 'Event' || data.target !== undefined || data.currentTarget !== undefined) {\n              console.warn('Preventing event object from being passed to component');\n              return;\n            }\n\n            // Check if it's a WebSocket Event object\n            if (data.type === 'error' && data.error !== undefined) {\n              console.warn('Preventing WebSocket error event from being passed to component');\n              return;\n            }\n          }\n          callback(data);\n        } catch (error) {\n          console.error('Event listener error:', error);\n        }\n      });\n    }\n  }\n}\n\n// Create named API instance\nconst apiInstance = {\n  bitcoin: bitcoinAPI,\n  alerts: alertsAPI,\n  chat: chatAPI,\n  system: systemAPI,\n  WebSocketService\n};\n\n// Export default API instance\nexport default apiInstance;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","WS_BASE_URL","REACT_APP_WS_URL","api","create","baseURL","timeout","headers","interceptors","response","use","error","_error$response","status","config","_retry","console","warn","Promise","r","setTimeout","request","reject","bitcoinAPI","chat","message","sessionId","post","session_id","data","getPrice","get","getSentiment","getMarketSummary","getNews","limit","analyzeText","text","alertsAPI","getActiveAlerts","getAlertHistory","chatAPI","getChatHistory","systemAPI","healthCheck","getConnectionCount","getContextualPrompts","_response$data","prompts","WebSocketService","constructor","url","ws","reconnectAttempts","maxReconnectAttempts","reconnectDelay","listeners","Map","connect","resolve","log","WebSocket","onopen","emit","onmessage","event","JSON","parse","type","send","timestamp","Date","toISOString","isEventLike","target","undefined","currentTarget","onclose","code","reason","safeData","delay","Math","min","pow","catch","err","onerror","Error","disconnect","close","readyState","OPEN","stringify","on","callback","has","set","push","off","callbacks","index","indexOf","splice","forEach","apiInstance","bitcoin","alerts","system"],"sources":["/Users/shayanbozorgmanesh/Documents/Parking/coinlink-mvp/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// API base configuration\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst WS_BASE_URL = process.env.REACT_APP_WS_URL || 'ws://localhost:8000/ws';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 60000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Global rate-limit friendly handling and auto-retry (single retry)\napi.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    try {\n      const status = error?.response?.status;\n      const config = error?.config || {};\n      if (status === 429 && !config._retry) {\n        console.warn('Too many requests. Retrying in 5s...');\n        config._retry = true;\n        await new Promise((r) => setTimeout(r, 5000));\n        return api.request(config);\n      }\n    } catch {}\n    return Promise.reject(error);\n  }\n);\n\n// Bitcoin Analysis API\nexport const bitcoinAPI = {\n  // Chat with Bitcoin analyst\n  async chat(message, sessionId = 'default') {\n    try {\n      const response = await api.post('/api/chat', { message, session_id: sessionId });\n      return response.data;\n    } catch (error) {\n      console.error('Chat API error:', error);\n      throw error;\n    }\n  },\n\n  // Get current Bitcoin price\n  async getPrice() {\n    try {\n      const response = await api.get('/api/bitcoin/price');\n      return response.data;\n    } catch (error) {\n      console.error('Price API error:', error);\n      throw error;\n    }\n  },\n\n  // Get Bitcoin sentiment\n  async getSentiment() {\n    try {\n      const response = await api.get('/api/bitcoin/sentiment');\n      return response.data;\n    } catch (error) {\n      console.error('Sentiment API error:', error);\n      throw error;\n    }\n  },\n\n  // Get market summary\n  async getMarketSummary() {\n    try {\n      const response = await api.get('/api/bitcoin/market-summary');\n      return response.data;\n    } catch ( error) {\n      console.error('Market summary API error:', error);\n      throw error;\n    }\n  },\n\n  // Get Bitcoin news\n  async getNews(limit = 10) {\n    try {\n      const response = await api.get(`/api/bitcoin/news?limit=${limit}`);\n      return response.data;\n    } catch (error) {\n      console.error('News API error:', error);\n      throw error;\n    }\n  },\n\n  // Analyze text sentiment\n  async analyzeText(text) {\n    try {\n      const response = await api.post('/api/bitcoin/analyze', { text });\n      return response.data;\n    } catch (error) {\n      console.error('Text analysis API error:', error);\n      throw error;\n    }\n  },\n};\n\n// Alerts API\nexport const alertsAPI = {\n  // Get active alerts\n  async getActiveAlerts() {\n    try {\n      const response = await api.get('/api/alerts');\n      return response.data;\n    } catch (error) {\n      console.error('Alerts API error:', error);\n      throw error;\n    }\n  },\n\n  // Get alert history\n  async getAlertHistory(limit = 20) {\n    try {\n      const response = await api.get(`/api/alerts/history?limit=${limit}`);\n      return response.data;\n    } catch (error) {\n      console.error('Alert history API error:', error);\n      throw error;\n    }\n  },\n};\n\n// Chat API\nexport const chatAPI = {\n  // Get chat history\n  async getChatHistory() {\n    try {\n      const response = await api.get('/api/chat/history');\n      return response.data;\n    } catch (error) {\n      console.error('Chat history API error:', error);\n      throw error;\n    }\n  },\n};\n\n// System API\nexport const systemAPI = {\n  // Health check\n  async healthCheck() {\n    try {\n      const response = await api.get('/health');\n      return response.data;\n    } catch (error) {\n      console.error('Health check API error:', error);\n      throw error;\n    }\n  },\n\n  // Get connection count\n  async getConnectionCount() {\n    try {\n      const response = await api.get('/api/connections');\n      return response.data;\n    } catch (error) {\n      console.error('Connection count API error:', error);\n      throw error;\n    }\n  },\n\n  // Get contextual prompts\n  async getContextualPrompts() {\n    try {\n      const response = await api.get('/api/prompts');\n      return response.data?.prompts || [];\n    } catch (error) {\n      console.error('Prompts API error:', error);\n      return [];\n    }\n  },\n};\n\n// WebSocket connection helper\nexport class WebSocketService {\n  constructor(url = WS_BASE_URL) {\n    this.url = url;\n    this.ws = null;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectDelay = 1000;\n    this.listeners = new Map();\n  }\n\n  connect() {\n    return new Promise((resolve, reject) => {\n      try {\n        try { console.log('[WS] connecting to', this.url); } catch {}\n        this.ws = new WebSocket(this.url);\n\n        this.ws.onopen = () => {\n          console.log('WebSocket connected');\n          this.reconnectAttempts = 0;\n          this.emit('connected');\n          resolve();\n        };\n\n        this.ws.onmessage = (event) => {\n          try {\n            const data = JSON.parse(event.data);\n            \n            // Handle ping messages by responding with pong\n            if (data.type === 'ping') {\n              this.send({ type: 'pong', timestamp: new Date().toISOString() });\n              return;\n            }\n            \n            // Ensure we're not passing the event object itself\n            if (data && typeof data === 'object' && !data.type) {\n              // Add a timestamp if not present\n              if (!data.timestamp) {\n                data.timestamp = new Date().toISOString();\n              }\n            }\n            // Guard against Event-like payloads\n            const isEventLike = data && (data.type === 'Event' || data.target !== undefined || data.currentTarget !== undefined);\n            if (!isEventLike) {\n              this.emit('message', data);\n            }\n          } catch (error) {\n            console.error('WebSocket message parse error:', error);\n            // Send a safe error message\n            this.emit('error', { \n              message: 'Failed to parse message', \n              timestamp: new Date().toISOString() \n            });\n          }\n        };\n\n        this.ws.onclose = (event) => {\n          console.log('WebSocket disconnected:', event.code, event.reason);\n          // Only pass safe, serializable data\n          const safeData = {\n            code: event.code || 0,\n            reason: event.reason || 'Unknown reason',\n            timestamp: new Date().toISOString()\n          };\n          this.emit('disconnected', safeData);\n          \n          // Don't reconnect if it was a manual close or server shutdown\n          if (event.code === 1000 || event.code === 1001) {\n            console.log('WebSocket closed normally, not reconnecting');\n            return;\n          }\n          \n          // Attempt to reconnect with exponential backoff\n          if (this.reconnectAttempts < this.maxReconnectAttempts) {\n            const delay = Math.min(this.reconnectDelay * Math.pow(2, this.reconnectAttempts), 10000);\n            console.log(`Reconnecting in ${delay}ms (attempt ${this.reconnectAttempts + 1}/${this.maxReconnectAttempts})`);\n            setTimeout(() => {\n              this.reconnectAttempts++;\n              this.connect().catch(err => {\n                console.error('Reconnection failed:', err);\n              });\n            }, delay);\n          } else {\n            console.log('Max reconnection attempts reached');\n            this.emit('reconnection_failed', { \n              message: 'Failed to reconnect after maximum attempts',\n              timestamp: new Date().toISOString()\n            });\n          }\n        };\n\n        this.ws.onerror = (error) => {\n          try {\n            console.error('WebSocket error occurred');\n          } catch {}\n          // Only pass safe, serializable data - never pass the error object directly\n          const safeData = {\n            message: 'WebSocket connection error occurred',\n            timestamp: new Date().toISOString()\n          };\n          this.emit('error', safeData);\n          // Don't reject with the raw error object\n          reject(new Error('WebSocket connection failed'));\n        };\n\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  disconnect() {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n\n  send(data) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify(data));\n    } else {\n      console.warn('WebSocket not connected');\n    }\n  }\n\n  // Event listener system\n  on(event, callback) {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, []);\n    }\n    this.listeners.get(event).push(callback);\n  }\n\n  off(event, callback) {\n    if (this.listeners.has(event)) {\n      const callbacks = this.listeners.get(event);\n      const index = callbacks.indexOf(callback);\n      if (index > -1) {\n        callbacks.splice(index, 1);\n      }\n    }\n  }\n\n  emit(event, data) {\n    if (this.listeners.has(event)) {\n      this.listeners.get(event).forEach(callback => {\n        try {\n          // Ensure we're not passing event objects to React components\n          if (data && typeof data === 'object') {\n            // Check if it's a DOM Event object\n            if (data.type === 'Event' || data.target !== undefined || data.currentTarget !== undefined) {\n              console.warn('Preventing event object from being passed to component');\n              return;\n            }\n            \n            // Check if it's a WebSocket Event object\n            if (data.type === 'error' && data.error !== undefined) {\n              console.warn('Preventing WebSocket error event from being passed to component');\n              return;\n            }\n          }\n          \n          callback(data);\n        } catch (error) {\n          console.error('Event listener error:', error);\n        }\n      });\n    }\n  }\n}\n\n// Create named API instance\nconst apiInstance = {\n  bitcoin: bitcoinAPI,\n  alerts: alertsAPI,\n  chat: chatAPI,\n  system: systemAPI,\n  WebSocketService,\n};\n\n// Export default API instance\nexport default apiInstance;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}