{"ast":null,"code":"import { WebSocketService } from './api';\nimport { Subject, filter, map, shareReplay } from 'rxjs';\nconst ws = new WebSocketService();\nconst inbound$ = new Subject();\nws.on('message', data => {\n  try {\n    console.log('[WS message]', data);\n  } catch {}\n  inbound$.next(data);\n});\nws.on('connected', () => inbound$.next({\n  type: 'status',\n  status: 'connected'\n}));\nws.on('disconnected', data => inbound$.next({\n  type: 'status',\n  status: 'disconnected',\n  data\n}));\nws.on('error', err => inbound$.next({\n  type: 'status',\n  status: 'error',\n  error: err\n}));\nexport const connectRealtime = () => ws.connect().catch(() => {});\nexport const connection$ = inbound$.pipe(filter(m => m && m.type === 'status'), shareReplay(1));\nexport const priceUpdates$ = inbound$.pipe(filter(m => m && m.type === 'price_update'), map(m => m.data), shareReplay(1));\nexport const alerts$ = inbound$.pipe(filter(m => m && (m.type === 'chat_agent_message' || m.type === 'alert')), map(m => {\n  // Prefer single-source agent chat to avoid duplicates\n  if (m.type === 'chat_agent_message') {\n    const payload = {\n      title: 'Agent',\n      text: m.content\n    };\n    try {\n      console.log('[Alerts$] agent message', payload);\n    } catch {}\n    return payload;\n  }\n  // If 'alert' still comes through, ignore to prevent duplication\n  try {\n    console.log('[Alerts$] dropped raw alert to avoid duplicates');\n  } catch {}\n  return null;\n}), filter(x => !!x), shareReplay(1));\nexport const sentimentShift$ = inbound$.pipe(filter(m => m && m.type === 'sentiment_shift'), map(m => m.data), shareReplay(1));","map":{"version":3,"names":["WebSocketService","Subject","filter","map","shareReplay","ws","inbound$","on","data","console","log","next","type","status","err","error","connectRealtime","connect","catch","connection$","pipe","m","priceUpdates$","alerts$","payload","title","text","content","x","sentimentShift$"],"sources":["/Users/shayanbozorgmanesh/Documents/Parking/coinlink-mvp/frontend/src/services/realtime.js"],"sourcesContent":["import { WebSocketService } from './api';\nimport { Subject, filter, map, shareReplay } from 'rxjs';\n\nconst ws = new WebSocketService();\nconst inbound$ = new Subject();\n\nws.on('message', (data) => {\n  try {\n    console.log('[WS message]', data);\n  } catch {}\n  inbound$.next(data)\n});\nws.on('connected', () => inbound$.next({ type: 'status', status: 'connected' }));\nws.on('disconnected', (data) => inbound$.next({ type: 'status', status: 'disconnected', data }));\nws.on('error', (err) => inbound$.next({ type: 'status', status: 'error', error: err }));\n\nexport const connectRealtime = () => ws.connect().catch(() => {});\n\nexport const connection$ = inbound$.pipe(\n  filter((m) => m && m.type === 'status'),\n  shareReplay(1)\n);\n\nexport const priceUpdates$ = inbound$.pipe(\n  filter((m) => m && m.type === 'price_update'),\n  map((m) => m.data),\n  shareReplay(1)\n);\n\nexport const alerts$ = inbound$.pipe(\n  filter((m) => m && (m.type === 'chat_agent_message' || m.type === 'alert')),\n  map((m) => {\n    // Prefer single-source agent chat to avoid duplicates\n    if (m.type === 'chat_agent_message') {\n      const payload = { title: 'Agent', text: m.content };\n      try { console.log('[Alerts$] agent message', payload); } catch {}\n      return payload;\n    }\n    // If 'alert' still comes through, ignore to prevent duplication\n    try { console.log('[Alerts$] dropped raw alert to avoid duplicates'); } catch {}\n    return null;\n  }),\n  filter((x) => !!x),\n  shareReplay(1)\n);\n\nexport const sentimentShift$ = inbound$.pipe(\n  filter((m) => m && m.type === 'sentiment_shift'),\n  map((m) => m.data),\n  shareReplay(1)\n);\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}