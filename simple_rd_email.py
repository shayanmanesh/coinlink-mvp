#!/usr/bin/env python3
"""
Simple standalone R&D email reporting system
Can be run independently or scheduled via cron
"""

import asyncio
import smtplib
import ssl
import os
import logging
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
import sys

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def send_test_rd_report():
    """Send a test R&D 30-minute report"""
    
    # Email configuration
    smtp_server = os.getenv("SMTP_SERVER", "smtp.gmail.com")
    smtp_port = int(os.getenv("SMTP_PORT", "587"))
    sender_email = os.getenv("SENDER_EMAIL", "noreply@coinlink.app")
    sender_password = os.getenv("SENDER_PASSWORD", "")
    recipient = "shayan.bozorgmanesh@gmail.com"
    
    # Create test report
    subject = f"‚ö° CoinLink R&D 30-Min Test Report - {datetime.now().strftime('%H:%M')}"
    
    html_content = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <style>
            body {{ font-family: 'Segoe UI', Arial, sans-serif; line-height: 1.6; color: #333; max-width: 750px; margin: 0 auto; }}
            .header {{ background: linear-gradient(135deg, #2196f3 0%, #1976d2 100%); color: white; padding: 15px; text-align: center; }}
            .section {{ margin: 15px 0; padding: 15px; border-left: 3px solid #2196f3; background: #f8f9fa; }}
            .success {{ background: #e8f5e8; padding: 15px; border-radius: 5px; margin: 15px 0; }}
            .timestamp {{ color: #666; font-size: 0.8em; }}
        </style>
    </head>
    <body>
        <div class="header">
            <h1>‚ö° CoinLink R&D 30-Minute Test Report</h1>
            <p class="timestamp">{datetime.now().strftime('%B %d, %Y at %I:%M %p')}</p>
        </div>
        
        <div class="success">
            <h2>üéâ System Deployment Successful!</h2>
            <p>R&D 30-minute reporting system has been successfully deployed to production at www.coin.link</p>
        </div>
        
        <div class="section">
            <h3>üìß Email Notification Status</h3>
            <p>‚úÖ Email template rendering: Working</p>
            <p>‚úÖ Recipient configuration: shayan.bozorgmanesh@gmail.com</p>
            <p>‚úÖ Production deployment: Active</p>
            <p>‚ö†Ô∏è SMTP configuration: {('Configured' if sender_password else 'Demo mode (no SMTP credentials)')}</p>
        </div>
        
        <div class="section">
            <h3>üîß Next Steps</h3>
            <p>To enable full email delivery (currently in demo mode):</p>
            <ul>
                <li>Set SENDER_EMAIL environment variable</li>
                <li>Set SENDER_PASSWORD environment variable (app-specific password)</li>
                <li>Optionally set SMTP_SERVER and SMTP_PORT if not using Gmail</li>
            </ul>
        </div>
        
        <div class="section">
            <h3>‚è∞ Reporting Schedule</h3>
            <p>üìÖ Frequency: Every 30 minutes</p>
            <p>üåô Quiet hours: 10 PM - 7 AM (no reports)</p>
            <p>üö® Emergency alerts: Bypass quiet hours</p>
            <p>üìä Content: Competitive intelligence, research highlights, innovation pipeline updates</p>
        </div>
        
        <div style="text-align: center; color: #666; font-size: 11px; padding: 15px;">
            <p>Generated by CoinLink R&D System | Production Deployment Test</p>
            <p>System is operational and ready for automated reporting</p>
        </div>
    </body>
    </html>
    """
    
    try:
        # Create message
        message = MIMEMultipart("alternative")
        message["Subject"] = subject
        message["From"] = sender_email
        message["To"] = recipient
        
        # Add HTML content
        html_part = MIMEText(html_content, "html")
        message.attach(html_part)
        
        # Send email
        if not sender_password:
            logger.info("=== EMAIL NOTIFICATION (Demo Mode) ===")
            logger.info(f"To: {recipient}")
            logger.info(f"Subject: {subject}")
            logger.info(f"Content Length: {len(html_content)} characters")
            logger.info("=== Email would be sent in production mode ===")
            print("‚úÖ R&D email system test completed successfully (demo mode)")
            print("üîß Configure SMTP environment variables for actual email delivery")
            return True
        
        # Production email sending
        context = ssl.create_default_context()
        with smtplib.SMTP(smtp_server, smtp_port) as server:
            server.starttls(context=context)
            server.login(sender_email, sender_password)
            server.sendmail(sender_email, recipient, message.as_string())
        
        logger.info(f"‚úÖ Test email sent successfully to {recipient}")
        print(f"‚úÖ R&D email system test completed - email sent to {recipient}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Email test failed: {e}")
        print(f"‚ùå Email test failed: {e}")
        return False

if __name__ == "__main__":
    success = asyncio.run(send_test_rd_report())
    sys.exit(0 if success else 1)