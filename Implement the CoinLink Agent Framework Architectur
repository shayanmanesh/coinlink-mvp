Implement the CoinLink Agent Framework Architecture as detailed below, ensuring full integration, production-ready state, and compatibility with TinyLlama-1.1B via Ollama. For each agent/sub-agent, incorporate the specified arXiv research: bilevel planning (arXiv:2506.19500), agent-as-tool hierarchy (arXiv:2507.01489), OTC-PO minimization (arXiv:2504.14870), MCP-Zero discovery (arXiv:2506.01056), multi-modal data (arXiv:2506.01973), Crew AI collaboration (arXiv:2507.20468), fact-subjectivity separation (arXiv:2410.12464), multi-agent decomposition (arXiv:2501.00826), reflection (arXiv:2507.20474), domain adaptation/fine-tuning (arXiv:2507.01990). Use MLX-LM for Apple Silicon efficiency and mx.float16. Sub-agents asynchronous; event bus communication; circuit breakers for failure handling. Output complete code in separate files (e.g., coordinator.py, tools.py), with tests for all components.

CoinLink Optimal Agent Framework (Enhanced Architecture):
- Master Domain
  - Agent: Central Coordinator - Oversees orchestration, bilevel planning (arXiv:2506.19500), and agent-as-tool hierarchy (arXiv:2507.01489); minimizes calls via OTC-PO (arXiv:2504.14870); discovers tools actively via MCP-Zero (arXiv:2506.01056)
  - Sub-Agents:
    - Reflection Module - Analyzes outcomes for refinement, per MountainLion/arXiv:2507.20474 and MFFMs/arXiv:2506.01973
    - Multi-Path Decider - Defines decision space, selects actions dynamically, per NaviAgent/arXiv:2506.19500
    - Tool Dependency Graph Navigator - Builds TDHG for toolchains, per NaviAgent/arXiv:2506.19500 and MCP-Zero/arXiv:2506.01056
- Market Domain
  - Agent: Market Analysis Coordinator - Processes multimodal data (arXiv:2506.01973); uses Crew AI collaboration for strategies (arXiv:2507.20468)
  - Sub-Agents:
    - Data Fetcher - Retrieves real-time multimodal inputs, per MFFMs/arXiv:2506.01973
    - Price Analyzer - Analyzes prices with fact-subjectivity separation, per arXiv:2410.12464
    - Technical Indicator Calculator - Computes indicators with efficient calls, per arXiv:2504.14870
- Sentiment Domain
  - Agent: Sentiment Analysis Coordinator - Separates fact/subjectivity for trading (arXiv:2410.12464); multi-modal RAG for news/charts (arXiv:2507.20474)
  - Sub-Agents:
    - News Scraper - Scrapes and classifies factual/subjective content, per arXiv:2410.12464
    - Social Media Monitor - Monitors and analyzes multimodal social data, per arXiv:2506.01973
    - Sentiment Classifier - Classifies with intra-team collaboration, per arXiv:2501.00826
    - Fact Reasoning Agent - Handles objective facts from news/social, per FS-ReasoningAgent/arXiv:2410.12464
    - Subjectivity Reasoning Agent - Handles opinions/judgments for bull/bear insights, per arXiv:2410.12464
- Risk Domain
  - Agent: Risk Management Coordinator - Assesses risk with multi-agent decomposition (arXiv:2501.00826); minimizes tools for efficiency (arXiv:2504.14870)
  - Sub-Agents:
    - Volatility Assessor - Assesses volatility with graph-based dependencies, per arXiv:2506.19500
    - Position Sizer - Sizes positions using Kelly Criterion, per arXiv:2507.20468
    - Exposure Monitor - Monitors exposure with reflection for adaptation, per arXiv:2507.20474
- Execution Domain
  - Agent: Trade Execution Coordinator - Executes with agentic autonomy (arXiv:2507.20468); discovers tools on-demand (arXiv:2506.01056)
  - Sub-Agents:
    - Order Placer - Places orders with minimal calls, per arXiv:2504.14870
    - Trade Executor - Executes trades with multi-path decisions, per arXiv:2506.19500
    - Status Checker - Checks status with fact-subjectivity validation, per arXiv:2410.12464
- Macro Domain
  - Agent: Macroeconomic Analysis Coordinator - Forecasts with multimodal inputs (arXiv:2506.01973); adapts via fine-tuning (arXiv:2507.01990)
  - Sub-Agents:
    - Economic Data Fetcher - Fetches macro data with RAG, per arXiv:2506.01973
    - Event Detector - Detects events with hierarchical routing, per arXiv:2506.01056
    - Forecast Generator - Generates forecasts with CoT reasoning, per arXiv:2507.01990
- Portfolio Domain
  - Agent: Portfolio Management Coordinator - Optimizes with multi-agent collaboration (arXiv:2501.00826); dynamic rebalancing (arXiv:2507.20468)
  - Sub-Agents:
    - Allocator - Allocates with fact-subjectivity (arXiv:2410.12464)
    - Optimizer - Optimizes using MoE/federated learning prospects, per arXiv:2506.01973
    - Rebalancer - Rebalances with tool productivity metrics, per arXiv:2504.14870

```
LOCKED INSTRUCTIONS - DO NOT DEVIATE:

Implement the CoinLink Optimal Agent Framework as a fully integrated web application with the EXACT specifications below. Output complete, production-ready code files.

TECHNICAL REQUIREMENTS:
- TinyLlama-1.1B via Ollama integration
- MLX-LM for Apple Silicon optimization, float16
- Asynchronous sub-agents with event bus communication
- Circuit breakers for failure handling
- All arXiv research implementations as specified

PROJECT STRUCTURE (CREATE ALL FILES):
coinlink-mvp/
├── src/
│   ├── lib/
│   │   ├── agents/
│   │   │   ├── master.py
│   │   │   ├── market.py
│   │   │   ├── sentiment.py
│   │   │   ├── risk.py
│   │   │   ├── execution.py
│   │   │   ├── macro.py
│   │   │   └── portfolio.py
│   │   ├── tools/
│   │   │   ├── market_tools.py
│   │   │   ├── sentiment_tools.py
│   │   │   ├── risk_tools.py
│   │   │   ├── execution_tools.py
│   │   │   ├── macro_tools.py
│   │   │   └── portfolio_tools.py
│   │   ├── config/
│   │   │   ├── llama_config.py
│   │   │   └── production.py
│   │   ├── security/
│   │   │   ├── auth.py
│   │   │   └── error_handling.py
│   │   ├── langchain/
│   │   │   └── integration.py
│   │   ├── utils/
│   │   │   ├── event_bus.py
│   │   │   └── mlx_utils.py
│   │   ├── websocket/
│   │   │   ├── server.py
│   │   │   ├── handlers.py
│   │   │   └── events.py
│   │   ├── events/
│   │   │   ├── triggers.py
│   │   │   ├── listeners.py
│   │   │   └── schedulers.py
│   │   ├── chat/
│   │   │   ├── hub.py
│   │   │   ├── sessions.py
│   │   │   └── message_handler.py
│   │   └── ml/
│   │       ├── preprocessing.py
│   │       ├── feature_engineering.py
│   │       ├── model_utils.py
│   │       └── evaluation.py
│   └── middleware/
│       ├── authentication.py
│       ├── rate_limiting.py
│       └── cors.py
├── api/
│   ├── agent.py
│   ├── routes.py
│   └── schemas/
│       └── response_models.py
├── frontend/
│   ├── src/
│   │   ├── components/
│   │   │   ├── chat/
│   │   │   ├── dashboard/
│   │   │   ├── trading/
│   │   │   └── common/
│   │   ├── pages/
│   │   ├── hooks/
│   │   ├── services/
│   │   ├── store/
│   │   └── styles/
│   ├── public/
│   └── package.json
├── database/
│   ├── migrations/
│   ├── schemas/
│   ├── models/
│   └── seeds/
├── data/
│   ├── datasets/
│   │   ├── training/
│   │   ├── validation/
│   │   └── test/
│   ├── cache/
│   ├── historical/
│   ├── temp/
│   └── backups/
├── models/
│   ├── mlx-server/
│   └── fine-tuned/
├── tests/
│   ├── unit/
│   │   ├── test_agents.py
│   │   ├── test_tools.py
│   │   └── test_ml.py
│   ├── integration/
│   │   └── test_integration.py
│   └── e2e/
│       └── test_user_flows.py
├── monitoring/
│   ├── logs/
│   ├── metrics/
│   ├── alerts/
│   └── dashboards/
├── deployment/
│   ├── docker/
│   │   ├── Dockerfile.api
│   │   ├── Dockerfile.frontend
│   │   └── Dockerfile.mlx
│   ├── k8s/
│   ├── docker-compose.yml
│   ├── deploy.sh
│   └── checklist.md
├── scripts/
│   ├── setup.py
│   ├── migrate.py
│   ├── seed.py
│   └── backup.py
├── docs/
│   ├── architecture.md
│   ├── api.md
│   ├── setup.md
│   └── agent-framework.md
├── config/
│   ├── .env.example
│   ├── .env.development
│   ├── .env.production
│   └── secrets/
├── static/
│   ├── images/
│   ├── fonts/
│   └── downloads/
├── .github/
│   └── workflows/
│       ├── ci.yml
│       └── cd.yml
├── requirements.txt
├── package.json
├── .gitignore
├── README.md
└── Makefile

AGENT FRAMEWORK IMPLEMENTATION:

0. SENIOR ANALYST DOMAIN (src/lib/agents/senior_analyst.py):
   - User Interface Coordinator: Natural language understanding, context-aware responses, conversation state management
   - Core Modules: User Context Tracker, Response Formatter, Priority Filter
   - Interfaces with: Master Domain (receives processed intelligence)
   - Model: TinyLlama-1.1B via Ollama (optimized for latency/conversation)

1. MASTER DOMAIN (src/lib/agents/master.py):
   - Central Coordinator: Bilevel planning (arXiv:2506.19500), agent-as-tool hierarchy (arXiv:2507.01489), OTC-PO minimization (arXiv:2504.14870), MCP-Zero discovery (arXiv:2506.01056)
   - Sub-agents: Reflection Module, Multi-Path Decider, Tool Dependency Graph Navigator

2. MARKET DOMAIN (src/lib/agents/market.py):
   - Market Analysis Coordinator: Multimodal data processing (arXiv:2506.01973), Crew AI collaboration (arXiv:2507.20468)
   - Sub-agents: Data Fetcher, Price Analyzer, Technical Indicator Calculator

3. SENTIMENT DOMAIN (src/lib/agents/sentiment.py):
   - Sentiment Analysis Coordinator: Fact-subjectivity separation (arXiv:2410.12464), multi-modal RAG (arXiv:2507.20474)
   - Sub-agents: News Scraper, Social Media Monitor, Sentiment Classifier, Fact Reasoning Agent, Subjectivity Reasoning Agent

4. RISK DOMAIN (src/lib/agents/risk.py):
   - Risk Management Coordinator: Multi-agent decomposition (arXiv:2501.00826), tool minimization (arXiv:2504.14870)
   - Sub-agents: Volatility Assessor, Position Sizer, Exposure Monitor

5. EXECUTION DOMAIN (src/lib/agents/execution.py):
   - Trade Execution Coordinator: Agentic autonomy (arXiv:2507.20468), on-demand tool discovery (arXiv:2506.01056)
   - Sub-agents: Order Placer, Trade Executor, Status Checker

6. MACRO DOMAIN (src/lib/agents/macro.py):
   - Macroeconomic Analysis Coordinator: Multimodal forecasting (arXiv:2506.01973), domain adaptation (arXiv:2507.01990)
   - Sub-agents: Economic Data Fetcher, Event Detector, Forecast Generator

7. PORTFOLIO DOMAIN (src/lib/agents/portfolio.py):
   - Portfolio Management Coordinator: Multi-agent collaboration (arXiv:2501.00826), dynamic rebalancing (arXiv:2507.20468)
   - Sub-agents: Allocator, Optimizer, Rebalancer

REQUIRED OUTPUTS:
1. All agent files with complete sub-agent implementations
2. Corresponding tool files for each domain
3. Event bus system (src/lib/utils/event_bus.py)
4. WebSocket server implementation
5. Chat hub with session management
6. Frontend React components for trading dashboard
7. API routes with authentication
8. Database models and migrations
9. Docker configurations
10. Comprehensive tests for all components

INTEGRATION REQUIREMENTS:
- Full MLX-LM integration for model serving
- TinyLlama-1.1B via Ollama configuration with all agents registered
- WebSocket real-time updates
- Event-driven proactive notifications
- Secure API with JWT authentication
- PostgreSQL database with proper schemas
- Redis for caching and session management
- Monitoring with Prometheus/Grafana
- CI/CD pipelines

Each file must be complete, tested, and production-ready. Include proper error handling, logging, and documentation. Begin with the core agent implementations.
```